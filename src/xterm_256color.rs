use colorspace::{
    color_space_rgb::{model_f32::SRGB, ColorSpaceRGB},
    lab::{delta_E_2000, xyz_to_lab, Lab},
    math::Matrix33,
    rgb::RGBf,
    transform::{rgb_to_xyz, rgb_to_xyz_matrix},
    xyz::XYZ,
};
use std::{f32, ops::Range};
use syntect::highlighting::Color;

static XTERM_256_BLACK: usize = 0;
static XTERM_256_WHITE: usize = 15;
static XTERM_256_FIRST_GREY: usize = 232;

lazy_static! {
    /// True if $TERM is xterm-256color, false otherwise
    pub static ref IS_XTERM_256COLOR: bool = match std::env::var("TERM") {
        Ok(ref term) if term == "xterm-256color" => true,
        _ => false,
    };

    /// Source sRGB colorspace
    static ref SRGB_COLORSPACE: &'static ColorSpaceRGB<f32> =
        &SRGB;

    /// Whitepoint for Lab conversion
    static ref D6500_WHITE: XYZ<f32> =
        XYZ::<f32>::new(95.047, 100.0, 108.883);

    /// Matrix for converting linear RGB to XYZ
    static ref RGB_TO_XYZ: Matrix33<f32> =
        rgb_to_xyz_matrix(SRGB_COLORSPACE.white, &SRGB_COLORSPACE);

    /// All 256 colors of xterm-256color, converted to CIELAB.
    ///
    /// RGB values taken from https://jonasjacek.github.io/colors/
    ///
    static ref XTERM_256_COLORS_LAB: Vec<colorspace::lab::Lab<f32>> = [
        (0, 0, 0),
        (128, 0, 0),
        (0, 128, 0),
        (128, 128, 0),
        (0, 0, 128),
        (128, 0, 128),
        (0, 128, 128),
        (192, 192, 192),
        (128, 128, 128),
        (255, 0, 0),
        (0, 255, 0),
        (255, 255, 0),
        (0, 0, 255),
        (255, 0, 255),
        (0, 255, 255),
        (255, 255, 255),
        (0, 0, 0),
        (0, 0, 95),
        (0, 0, 135),
        (0, 0, 175),
        (0, 0, 215),
        (0, 0, 255),
        (0, 95, 0),
        (0, 95, 95),
        (0, 95, 135),
        (0, 95, 175),
        (0, 95, 215),
        (0, 95, 255),
        (0, 135, 0),
        (0, 135, 95),
        (0, 135, 135),
        (0, 135, 175),
        (0, 135, 215),
        (0, 135, 255),
        (0, 175, 0),
        (0, 175, 95),
        (0, 175, 135),
        (0, 175, 175),
        (0, 175, 215),
        (0, 175, 255),
        (0, 215, 0),
        (0, 215, 95),
        (0, 215, 135),
        (0, 215, 175),
        (0, 215, 215),
        (0, 215, 255),
        (0, 255, 0),
        (0, 255, 95),
        (0, 255, 135),
        (0, 255, 175),
        (0, 255, 215),
        (0, 255, 255),
        (95, 0, 0),
        (95, 0, 95),
        (95, 0, 135),
        (95, 0, 175),
        (95, 0, 215),
        (95, 0, 255),
        (95, 95, 0),
        (95, 95, 95),
        (95, 95, 135),
        (95, 95, 175),
        (95, 95, 215),
        (95, 95, 255),
        (95, 135, 0),
        (95, 135, 95),
        (95, 135, 135),
        (95, 135, 175),
        (95, 135, 215),
        (95, 135, 255),
        (95, 175, 0),
        (95, 175, 95),
        (95, 175, 135),
        (95, 175, 175),
        (95, 175, 215),
        (95, 175, 255),
        (95, 215, 0),
        (95, 215, 95),
        (95, 215, 135),
        (95, 215, 175),
        (95, 215, 215),
        (95, 215, 255),
        (95, 255, 0),
        (95, 255, 95),
        (95, 255, 135),
        (95, 255, 175),
        (95, 255, 215),
        (95, 255, 255),
        (135, 0, 0),
        (135, 0, 95),
        (135, 0, 135),
        (135, 0, 175),
        (135, 0, 215),
        (135, 0, 255),
        (135, 95, 0),
        (135, 95, 95),
        (135, 95, 135),
        (135, 95, 175),
        (135, 95, 215),
        (135, 95, 255),
        (135, 135, 0),
        (135, 135, 95),
        (135, 135, 135),
        (135, 135, 175),
        (135, 135, 215),
        (135, 135, 255),
        (135, 175, 0),
        (135, 175, 95),
        (135, 175, 135),
        (135, 175, 175),
        (135, 175, 215),
        (135, 175, 255),
        (135, 215, 0),
        (135, 215, 95),
        (135, 215, 135),
        (135, 215, 175),
        (135, 215, 215),
        (135, 215, 255),
        (135, 255, 0),
        (135, 255, 95),
        (135, 255, 135),
        (135, 255, 175),
        (135, 255, 215),
        (135, 255, 255),
        (175, 0, 0),
        (175, 0, 95),
        (175, 0, 135),
        (175, 0, 175),
        (175, 0, 215),
        (175, 0, 255),
        (175, 95, 0),
        (175, 95, 95),
        (175, 95, 135),
        (175, 95, 175),
        (175, 95, 215),
        (175, 95, 255),
        (175, 135, 0),
        (175, 135, 95),
        (175, 135, 135),
        (175, 135, 175),
        (175, 135, 215),
        (175, 135, 255),
        (175, 175, 0),
        (175, 175, 95),
        (175, 175, 135),
        (175, 175, 175),
        (175, 175, 215),
        (175, 175, 255),
        (175, 215, 0),
        (175, 215, 95),
        (175, 215, 135),
        (175, 215, 175),
        (175, 215, 215),
        (175, 215, 255),
        (175, 255, 0),
        (175, 255, 95),
        (175, 255, 135),
        (175, 255, 175),
        (175, 255, 215),
        (175, 255, 255),
        (215, 0, 0),
        (215, 0, 95),
        (215, 0, 135),
        (215, 0, 175),
        (215, 0, 215),
        (215, 0, 255),
        (215, 95, 0),
        (215, 95, 95),
        (215, 95, 135),
        (215, 95, 175),
        (215, 95, 215),
        (215, 95, 255),
        (215, 135, 0),
        (215, 135, 95),
        (215, 135, 135),
        (215, 135, 175),
        (215, 135, 215),
        (215, 135, 255),
        (215, 175, 0),
        (215, 175, 95),
        (215, 175, 135),
        (215, 175, 175),
        (215, 175, 215),
        (215, 175, 255),
        (215, 215, 0),
        (215, 215, 95),
        (215, 215, 135),
        (215, 215, 175),
        (215, 215, 215),
        (215, 215, 255),
        (215, 255, 0),
        (215, 255, 95),
        (215, 255, 135),
        (215, 255, 175),
        (215, 255, 215),
        (215, 255, 255),
        (255, 0, 0),
        (255, 0, 95),
        (255, 0, 135),
        (255, 0, 175),
        (255, 0, 215),
        (255, 0, 255),
        (255, 95, 0),
        (255, 95, 95),
        (255, 95, 135),
        (255, 95, 175),
        (255, 95, 215),
        (255, 95, 255),
        (255, 135, 0),
        (255, 135, 95),
        (255, 135, 135),
        (255, 135, 175),
        (255, 135, 215),
        (255, 135, 255),
        (255, 175, 0),
        (255, 175, 95),
        (255, 175, 135),
        (255, 175, 175),
        (255, 175, 215),
        (255, 175, 255),
        (255, 215, 0),
        (255, 215, 95),
        (255, 215, 135),
        (255, 215, 175),
        (255, 215, 215),
        (255, 215, 255),
        (255, 255, 0),
        (255, 255, 95),
        (255, 255, 135),
        (255, 255, 175),
        (255, 255, 215),
        (255, 255, 255),
        (8, 8, 8),
        (18, 18, 18),
        (28, 28, 28),
        (38, 38, 38),
        (48, 48, 48),
        (58, 58, 58),
        (68, 68, 68),
        (78, 78, 78),
        (88, 88, 88),
        (98, 98, 98),
        (108, 108, 108),
        (118, 118, 118),
        (128, 128, 128),
        (138, 138, 138),
        (148, 148, 148),
        (158, 158, 158),
        (168, 168, 168),
        (178, 178, 178),
        (188, 188, 188),
        (198, 198, 198),
        (208, 208, 208),
        (218, 218, 218),
        (228, 228, 228),
        (238, 238, 238),
    ]
    .into_iter()
    .map(|col| srgb2lab(*col))
    .collect();

    /// Index ranges that cover all grey values
    static ref XTERM_GREY_RANGES: [Range<usize>; 3] = [
        XTERM_256_BLACK..XTERM_256_BLACK + 1,
        XTERM_256_WHITE..XTERM_256_WHITE + 1,
        XTERM_256_FIRST_GREY..XTERM_256_COLORS_LAB.len()
    ];

    /// Index ranges that cover all color values
    static ref XTERM_COLOR_RANGES: [Range<usize>; 3] = [
        XTERM_256_WHITE + 1..XTERM_256_FIRST_GREY,
        0..0,
        0..0
    ];

}

/// Turn a display-referred sRGB color value into a CIELAB color value.
fn srgb2lab(rgb: (u8, u8, u8)) -> Lab<f32> {
    let rgb = SRGB_COLORSPACE.decode(RGBf::new(rgb.0 as f32, rgb.1 as f32, rgb.2 as f32));
    let xyz = rgb_to_xyz(&RGB_TO_XYZ, rgb);
    xyz_to_lab(xyz, *D6500_WHITE)
}

/// Find the index of the xterm-256color color that is perceptually
/// closest to the given RGB color. Assumes that input is
/// display-referred sRGB. Ignores alpha.
pub fn nearest_xterm_256color_index(color: &Color) -> usize {
    let lab1 = srgb2lab((color.r, color.g, color.b));
    let mut nearest_index = 0;
    let mut nearest_dist = f32::MAX;
    let candidate_ranges = if color.r == color.g && color.g == color.b {
        &*XTERM_GREY_RANGES
    } else {
        &*XTERM_COLOR_RANGES
    };
    for range in candidate_ranges.iter() {
        for index in range.clone() {
            let dist = delta_E_2000(lab1, XTERM_256_COLORS_LAB[index]);
            if dist < nearest_dist {
                nearest_dist = dist;
                nearest_index = index;
            }
        }
    }
    nearest_index
}
